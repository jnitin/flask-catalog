venv
====
( ) Create a NEW venv from scratch. Do NOT copy from other location:
     ( )Temporarily remove venv activation in .bashrc
     ( )Install python3-pip, python3-venv
     ( )Follow instructions inside pip_all.sh
     ( )Restore venv activation in .bashrc


models
======
(-) user blueprint
     ( ) remove application specific columns
     ( ) remove application specific methods
     ( ) define application specific columns
     ( ) define application specific methods
     ( ) update tests_user_model.py

     (-) Delete owned entries of a user when Deleting a user

(-) catalog blueprint
     ( ) Register the blueprint
     (-) models.py
          ( ) Define ORM classes
          ( ) Define method: insert_default_items
          ( ) Call this method from catalog.py, if app.db not there.
          ( ) Remove app.db, then startup web server, and verify that app.db contains correct tables & default entries
     ( ) create tests/tests_catalog_model.py

permissions
===========
(-) Only admin can create categoriies
     (-) via web-page
     (-) via API

(-) Only logged in users can create items
     (-) via web-page
     (-) via API

branding
========
( ) Rename startup python file: catalog.py
( ) Replace icons in static (favicon.ico & img/logo* )
( ) In base.html
     ( ) meta name --> for SEO
( ) In index.html
     ( ) set page_title = '.......' --> for web-browser tab on home page
     ( ) update jumbotron content

credits
=======
( ) In index.html
     ( ) update credits

configuration
=============
(-) Update SECRET_KEY (instance/config.py)

views & html
============
(-) Add capability to add new items
(-) Add capability to edit items
(-) Add capability to delete items

auth
====

3rd party integration
=================
(-) Add google OAUTH2
     ( ) Get auth keys at google for this application
          (-) https://console.developers.google.com/apis
               (See nd004 3.11-5 instructions on Google Drive)

     ( ) Add keys to instance/config.py
     (-) LOGIN & REGISTER
          ( ) Add button & javascript to login.html, via login_oauth.html base template
          ( ) In login_oauth.html, set correct redirect upon succesful login
          ( ) gconnect method in views.py
               ( ) Create CSRF token (state) in auth.views.login and pass to template
                    (-) Test this on multiple login sessions going on at once...
               ( ) If user does not yet exist, create it.
               ( ) Register user with flask_login
               ( ) In verify password, check if password was set.
          (-) In profile: update password
              (-) if registered with Google, do NOT ask for previous password,
                  because it does not exist.
                  Ask instead to re-login with GOOGLE account before proceeding.
          (-) Write a unit test for Google signin
          (-) Write a e2e test for Google signin

(-) Add beerDB interface

profile pictures
============
(-) Avoid clutter in uploads folder
     (-) In tests, remove any uploaded pictures during teardown
     (-) When deleting user, make sure his uploads are deleted as well
     (-) When changing profile picture, make sure to delete previous one


api
===
(-) Create application specific package, like api/catalog, with:
     (-) model_schemas.py
     (-) views.py
     (-) __init__.py


(-) In user/models.py, update to_json() methods
     (-) In tests_items_modelpy, update to_json tests

(-) All responses must return JSON API 1.0 specification

e2e testing
===========
(-) Update e2e_tests.ipynb
(-) Test register_from_invitation route
(-) Test display of profile pic when it comes from Google

configuration
=============
(-) Put production configurations into environments, enabling heroku deployment
(-) Create multiple configs, as in Flask Web Development book

cleanup
=======
( ) Remove meal blueprint
( ) Remove api/meal package
( ) Get rid of RelationShips. Don't need them... (I think)
(-) Explanation why "type": "user"  in the POST request to register a user

code review
===========
(-) Do all POST requests return a redirect instead of render_template?
     --> This is important to avoid resubmission of forms
          (see: https://en.wikipedia.org/wiki/Post/Redirect/Get )
(-) Do all entries in HTML for forms have error printing (See login as example)
(-) Fix all Pylint Errors
(-) Fix all Pylint Warnings
(-) Fix all Pylint Info messages


deployment
==========
(-) Checklist before deployment
     (-) Did I add all required credits to index.html?
     (-) Is DEBUG mode turned off?
     (-) Is SECRET_KEY updated?

(-) Deploy to heroku (Follow mega tutorial instructions...)
     ( ) Put all secret configurations into environment variables
     ( ) Upgrade to Python 3.6.2 (https://docs.google.com/document/d/1hMlS6pfl_bG0vz6ns2bG4NMRgsVdIzpyPQxIkmsOubs/edit)
     ( ) Update requirements.txt
     ( ) install heroku CLI (https://devcenter.heroku.com/articles/heroku-cli#download-and-install)
          $ sudo snap install heroku --classic
          $ heroku --version
          heroku-cli/6.16.4 (linux-x64) node-v9.9.0
     ( ) Implement database migration
          ( ) Follow section 4.2 of Mega Tutorial
               (-) Add extension Flask-Migrate
                    (o) This adds sub-command: flask db
               (-) Initialize migration repository:
                    (venv) $ flask db init
                    --> creates a folder ./migrations which must be put under source control
               (-) Do a database migration, with comment
                    $ flask db migrate -m "initial"    (Creates migration script)
                    $ flask db upgrade                 (Creates/Upgrades db)

                    NOTE:
                    (o) When working with database servers such as MySQL and
                        PostgreSQL, you have to create the database in the
                        database server before running upgrade.
                    (o) If you ever need to downgrade the database, use this:
                         $ flask db downgrade
                         $ rm <last migration script>
                    (o) Question: does Flask-Migrate get rid of content???

          ( ) Update initdb in app.py, to reset db and create default content
              Test it by runnning the initdb command:
              $ flask initdb
              $ sqlitebrowser app.db   (VERIFY CONTENT)

              NOTE: initdb is NOT related to Flask-Migrate. It uses the
                    standard capability of Flask, which comes with cli out of
                    the box (http://flask.pocoo.org/docs/0.12/cli/)

     (-) login to heroku CLI
          $ heroku login
          NOTE: The heroku CLI saves your email address and an API token to ~/.netrc
                for future use. For more information, see Heroku CLI Authentication:
                https://devcenter.heroku.com/articles/authentication

     (-) set DATABASE_URL in .env ....!!!!

promotion
=========
(-) Push project to personal git and use as project example in Toptal profile
     (-) Update README to end customer perspective.
(-) Export Jupyter notebook to HTML and use as awesome example in Toptal profile


###############################
## TO DO FOR NEXT deployment ##
###############################

(-) Refactor with Templates moved into each blueprint folder
(-) Update password
(-) Reset password
(-) Activate link in /unconfirmed : Need another confirmation email?




